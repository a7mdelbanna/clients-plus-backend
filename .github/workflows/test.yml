name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  POSTGRES_VERSION: '16'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: clients_plus_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      # Test Database Configuration
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clients_plus_test
      DATABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/clients_plus_test_integration
      NODE_ENV: test
      
      # JWT Configuration
      JWT_SECRET: test-jwt-secret-for-ci-testing-only-not-production-use-long-enough-to-be-secure
      JWT_REFRESH_SECRET: test-jwt-refresh-secret-for-ci-testing-only-not-production-use-long-enough
      JWT_EXPIRES_IN: 15m
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # Security
      BCRYPT_ROUNDS: 4
      SESSION_SECRET: test-session-secret-for-ci-testing-only
      ENCRYPTION_KEY: test-encryption-key-32-characters
      
      # Server Configuration
      PORT: 3000
      API_PREFIX: /api/v1
      
      # CORS
      CORS_ORIGIN: http://localhost:3001
      ALLOWED_ORIGINS: http://localhost:3001,http://localhost:3000,http://localhost:5173
      
      # Rate Limiting
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 10000
      
      # Redis Configuration
      REDIS_URL: redis://localhost:6379/1
      REDIS_HOST: localhost
      REDIS_PORT: 6379
      REDIS_DB: 1
      
      # Email Configuration (Mocked)
      SMTP_HOST: smtp.example.com
      SMTP_PORT: 587
      SMTP_SECURE: false
      SMTP_USER: test@example.com
      SMTP_PASS: test-password
      FROM_EMAIL: noreply@example.com
      FROM_NAME: Test App
      
      # File Upload
      MAX_FILE_SIZE: 10485760
      UPLOAD_DIR: uploads/test/
      ALLOWED_FILE_TYPES: jpg,jpeg,png,pdf,doc,docx
      
      # Logging
      LOG_LEVEL: silent
      LOG_FILE: logs/test.log
      ENABLE_REQUEST_LOGGING: false
      
      # Feature Flags for Testing
      ENABLE_AUDIT_LOGGING: true
      ENABLE_MULTI_BRANCH_SUPPORT: true
      ENABLE_STAFF_SCHEDULING: true
      ENABLE_INVENTORY_TRACKING: true
      ENABLE_APPOINTMENT_REMINDERS: false
      
      # External Service Mocks
      MOCK_EMAIL_SERVICE: true
      MOCK_SMS_SERVICE: true
      MOCK_PAYMENT_GATEWAY: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Build application
        run: npm run build

      - name: Run unit tests
        run: npm run test -- --testPathPattern=tests/unit --verbose

      - name: Run service tests
        run: npm run test -- --testPathPattern=tests/services --verbose

      - name: Run controller tests
        run: npm run test -- --testPathPattern=tests/controllers --verbose

      - name: Run middleware tests
        run: npm run test -- --testPathPattern=tests/middleware --verbose

      - name: Run integration tests
        run: npm run test -- --testPathPattern=tests/integration --verbose --runInBand

      - name: Run multi-tenant isolation tests
        run: npm run test -- --testPathPattern=multi-tenant-isolation --verbose --runInBand

      - name: Generate test coverage report
        run: npm run test:coverage -- --testPathIgnorePatterns=tests/performance

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: clients_plus_perf_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/clients_plus_perf_test
      DATABASE_TEST_URL: postgresql://postgres:postgres@localhost:5432/clients_plus_perf_test
      NODE_ENV: test
      JWT_SECRET: test-jwt-secret-for-performance-testing
      JWT_REFRESH_SECRET: test-jwt-refresh-secret-for-performance-testing
      LOG_LEVEL: silent
      PERFORMANCE_TESTING: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations
        run: npx prisma migrate deploy

      - name: Build application
        run: npm run build

      - name: Run performance tests
        run: npm run test -- --testPathPattern=tests/performance --verbose --runInBand --detectOpenHandles

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: |
            logs/
            coverage/
          retention-days: 7

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run vulnerability scan
        run: npx audit-ci --moderate

  quality-check:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Check code formatting
        run: npx prettier --check "src/**/*.{ts,js,json}"

  build-and-test-docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: [test, quality-check]
    if: github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.dev
          push: false
          tags: clients-plus-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker container
        run: |
          docker run --rm -d --name test-container -p 3000:3000 \
            -e NODE_ENV=test \
            -e DATABASE_URL=postgresql://test:test@localhost:5432/test_db \
            -e JWT_SECRET=test-secret \
            clients-plus-backend:test
          
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/api/v1/health || exit 1
          
          # Stop container
          docker stop test-container

  database-migration-test:
    name: Database Migration Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: migration_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/migration_test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Test fresh migration
        run: npx prisma migrate deploy

      - name: Verify database schema
        run: npx prisma db pull --print

      - name: Test migration rollback capability
        run: |
          # This would test migration rollback if supported
          echo "Migration rollback test would go here"
          
      - name: Test data seeding
        run: npx prisma db seed

  integration-e2e:
    name: End-to-End Integration
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: e2e_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/e2e_test
      NODE_ENV: test
      JWT_SECRET: e2e-test-secret
      LOG_LEVEL: info

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client and run migrations
        run: |
          npx prisma generate
          npx prisma migrate deploy

      - name: Build and start application
        run: |
          npm run build
          npm start &
          sleep 10

      - name: Run E2E workflow tests
        run: |
          # Test complete user workflows
          npm run test -- --testPathPattern=tests/e2e --verbose --runInBand

      - name: Generate E2E test report
        if: always()
        run: |
          echo "E2E test results would be processed here"

  notify-status:
    name: Notify Test Status
    runs-on: ubuntu-latest
    needs: [test, performance-tests, security-scan, quality-check]
    if: always()

    steps:
      - name: Notify success
        if: needs.test.result == 'success' && needs.quality-check.result == 'success'
        run: |
          echo "✅ All tests passed successfully!"
          echo "Test Status: ${{ needs.test.result }}"
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Performance Tests: ${{ needs.performance-tests.result }}"

      - name: Notify failure
        if: needs.test.result == 'failure' || needs.quality-check.result == 'failure'
        run: |
          echo "❌ Tests failed!"
          echo "Test Status: ${{ needs.test.result }}"
          echo "Quality Check: ${{ needs.quality-check.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          exit 1